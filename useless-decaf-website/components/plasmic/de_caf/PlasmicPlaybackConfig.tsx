// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: u8AT6wj1zWXgx7uJr3qyey
// Component: FzJFmXbof0h6

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_de_caf.module.css"; // plasmic-import: u8AT6wj1zWXgx7uJr3qyey/projectcss
import sty from "./PlasmicPlaybackConfig.module.css"; // plasmic-import: FzJFmXbof0h6/css

createPlasmicElementProxy;

export type PlasmicPlaybackConfig__VariantMembers = {};
export type PlasmicPlaybackConfig__VariantsArgs = {};
type VariantPropType = keyof PlasmicPlaybackConfig__VariantsArgs;
export const PlasmicPlaybackConfig__VariantProps = new Array<VariantPropType>();

export type PlasmicPlaybackConfig__ArgsType = {};
type ArgPropType = keyof PlasmicPlaybackConfig__ArgsType;
export const PlasmicPlaybackConfig__ArgProps = new Array<ArgPropType>();

export type PlasmicPlaybackConfig__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  radioGroup?: p.Flex<typeof AntdRadioGroup>;
  radioGroup2?: p.Flex<typeof AntdRadioGroup>;
};

export interface DefaultPlaybackConfigProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPlaybackConfig__RenderFunc(props: {
  variants: PlasmicPlaybackConfig__VariantsArgs;
  args: PlasmicPlaybackConfig__ArgsType;
  overrides: PlasmicPlaybackConfig__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "DK"
      },
      {
        path: "radioGroup2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "DK"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__nyjyN)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rrhsM
            )}
          >
            {"Audio"}
          </div>
          <AntdRadioGroup
            data-plasmic-name={"radioGroup"}
            data-plasmic-override={overrides.radioGroup}
            className={classNames("__wab_instance", sty.radioGroup)}
            defaultValue={"DK"}
            onChange={p.generateStateOnChangeProp($state, [
              "radioGroup",
              "value"
            ])}
            optionType={"default"}
            options={(() => {
              const __composite = [
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null }
              ];
              __composite["0"]["value"] = "DK";
              __composite["0"]["label"] = "Dk";
              __composite["1"]["value"] = "Sv";
              __composite["1"]["label"] = "SV";
              __composite["2"]["value"] = "NO";
              __composite["2"]["label"] = "NO";
              return __composite;
            })()}
            value={p.generateStateValueProp($state, ["radioGroup", "value"])}
          >
            <AntdRadio
              className={classNames("__wab_instance", sty.radio__ghEf6)}
              value={"op1"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hxjWc
                )}
              >
                {"Option 1"}
              </div>
            </AntdRadio>
            <AntdRadio
              className={classNames("__wab_instance", sty.radio__xA5Kl)}
              value={"op2"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qWvUu
                )}
              >
                {"Option 2"}
              </div>
            </AntdRadio>
          </AntdRadioGroup>
        </div>
        <div className={classNames(projectcss.all, sty.column__hkCoM)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___4TfE1
            )}
          >
            {"Subtitle"}
          </div>
          <AntdRadioGroup
            data-plasmic-name={"radioGroup2"}
            data-plasmic-override={overrides.radioGroup2}
            className={classNames("__wab_instance", sty.radioGroup2)}
            defaultValue={"DK"}
            onChange={p.generateStateOnChangeProp($state, [
              "radioGroup2",
              "value"
            ])}
            optionType={"default"}
            options={(() => {
              const __composite = [
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null },
                { value: null, label: null }
              ];
              __composite["0"]["value"] = "DK";
              __composite["0"]["label"] = "Dk";
              __composite["1"]["value"] = "Sv";
              __composite["1"]["label"] = "SV";
              __composite["2"]["value"] = "NO";
              __composite["2"]["label"] = "NO";
              __composite["3"]["value"] = "Off";
              __composite["3"]["label"] = "Off";
              return __composite;
            })()}
            value={p.generateStateValueProp($state, ["radioGroup2", "value"])}
          >
            <AntdRadio
              className={classNames("__wab_instance", sty.radio__bVSj)}
              value={"op1"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xT9IW
                )}
              >
                {"Option 1"}
              </div>
            </AntdRadio>
            <AntdRadio
              className={classNames("__wab_instance", sty.radio__fC1F)}
              value={"op2"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__elgy8
                )}
              >
                {"Option 2"}
              </div>
            </AntdRadio>
          </AntdRadioGroup>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "radioGroup", "radioGroup2"],
  columns: ["columns", "radioGroup", "radioGroup2"],
  radioGroup: ["radioGroup"],
  radioGroup2: ["radioGroup2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  radioGroup: typeof AntdRadioGroup;
  radioGroup2: typeof AntdRadioGroup;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPlaybackConfig__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPlaybackConfig__VariantsArgs;
    args?: PlasmicPlaybackConfig__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPlaybackConfig__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPlaybackConfig__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPlaybackConfig__ArgProps,
          internalVariantPropNames: PlasmicPlaybackConfig__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPlaybackConfig__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPlaybackConfig";
  } else {
    func.displayName = `PlasmicPlaybackConfig.${nodeName}`;
  }
  return func;
}

export const PlasmicPlaybackConfig = Object.assign(
  // Top-level PlasmicPlaybackConfig renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    radioGroup: makeNodeComponent("radioGroup"),
    radioGroup2: makeNodeComponent("radioGroup2"),

    // Metadata about props expected for PlasmicPlaybackConfig
    internalVariantProps: PlasmicPlaybackConfig__VariantProps,
    internalArgProps: PlasmicPlaybackConfig__ArgProps
  }
);

export default PlasmicPlaybackConfig;
/* prettier-ignore-end */
