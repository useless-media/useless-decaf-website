// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: u8AT6wj1zWXgx7uJr3qyey
// Component: RjUQ3Wl5t2tN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { AntdSingleCollapse } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { singleCollapseHelpers as AntdSingleCollapse_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import StoredItems from "../../StoredItems"; // plasmic-import: b9GefjjzZ8pp/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_de_caf.module.css"; // plasmic-import: u8AT6wj1zWXgx7uJr3qyey/projectcss
import sty from "./PlasmicDcafJsonEditor.module.css"; // plasmic-import: RjUQ3Wl5t2tN/css

createPlasmicElementProxy;

export type PlasmicDcafJsonEditor__VariantMembers = {};
export type PlasmicDcafJsonEditor__VariantsArgs = {};
type VariantPropType = keyof PlasmicDcafJsonEditor__VariantsArgs;
export const PlasmicDcafJsonEditor__VariantProps = new Array<VariantPropType>();

export type PlasmicDcafJsonEditor__ArgsType = {
  storedItems?: any;
  onSelect?: (data: any) => void;
  saveLoadRequest?: () => void;
};
type ArgPropType = keyof PlasmicDcafJsonEditor__ArgsType;
export const PlasmicDcafJsonEditor__ArgProps = new Array<ArgPropType>(
  "storedItems",
  "onSelect",
  "saveLoadRequest"
);

export type PlasmicDcafJsonEditor__OverridesType = {
  root?: p.Flex<"div">;
  collapse?: p.Flex<typeof AntdSingleCollapse>;
  storedItems?: p.Flex<typeof StoredItems>;
  container?: p.Flex<"div">;
};

export interface DefaultDcafJsonEditorProps {
  storedItems?: any;
  onSelect?: (data: any) => void;
  saveLoadRequest?: () => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDcafJsonEditor__RenderFunc(props: {
  variants: PlasmicDcafJsonEditor__VariantsArgs;
  args: PlasmicDcafJsonEditor__ArgsType;
  overrides: PlasmicDcafJsonEditor__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "collapse.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        onMutate: p.generateOnMutateForSpec("open", AntdSingleCollapse_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      {(() => {
        const child$Props = {
          bordered: true,
          className: classNames("__wab_instance", sty.collapse),
          collapsible: "icon",
          defaultOpen: false,
          expandIconPosition: "start",
          forceRender: false,
          ghost: false,
          headerClass: classNames({ [sty["pcls_t1I6UDdAbDg1"]]: true }),
          label2: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dmXzb
              )}
            >
              {"Load request & Assets"}
            </div>
          ),
          onChange: async (...eventArgs: any) => {
            p.generateStateOnChangePropForCodeComponents(
              $state,
              "open",
              ["collapse", "open"],
              AntdSingleCollapse_Helpers
            ).apply(null, eventArgs);
            (async activeIds => {
              const $steps = {};
            }).apply(null, eventArgs);
          },
          open: p.generateStateValueProp($state, ["collapse", "open"]),
          showArrow: true,
          size: "small"
        };
        p.initializeCodeComponentStates(
          $state,
          [
            {
              name: "open",
              plasmicStateName: "collapse.open"
            }
          ],
          [],
          AntdSingleCollapse_Helpers ?? {},
          child$Props
        );

        return (
          <AntdSingleCollapse
            data-plasmic-name={"collapse"}
            data-plasmic-override={overrides.collapse}
            {...child$Props}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__r4Qqx)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $props.storedItems;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <StoredItems
                    data-plasmic-name={"storedItems"}
                    data-plasmic-override={overrides.storedItems}
                    className={classNames("__wab_instance", sty.storedItems)}
                    key={currentIndex}
                    title={(() => {
                      try {
                        return currentItem.name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    type={(() => {
                      try {
                        return currentItem.type;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                );
              })}
            </p.Stack>
          </AntdSingleCollapse>
        );
      })()}
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__i9Oh)}
      >
        <AntdButton
          className={classNames("__wab_instance", sty.button__anF3H)}
          shape={"default"}
          size={"small"}
          type={"text"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__quG7N
            )}
          >
            {"New"}
          </div>
        </AntdButton>
        <AntdButton
          className={classNames("__wab_instance", sty.button__gskAp)}
          shape={"default"}
          size={"small"}
          type={"text"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___9Baa
            )}
          >
            {"Clear"}
          </div>
        </AntdButton>
        <AntdButton
          className={classNames("__wab_instance", sty.button__rPxHb)}
          shape={"default"}
          size={"small"}
          type={"text"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qnYjc
            )}
          >
            {"Save"}
          </div>
        </AntdButton>
      </p.Stack>
      <div
        data-plasmic-name={"container"}
        data-plasmic-override={overrides.container}
        className={classNames(projectcss.all, sty.container)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "collapse", "storedItems", "container"],
  collapse: ["collapse", "storedItems"],
  storedItems: ["storedItems"],
  container: ["container"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  collapse: typeof AntdSingleCollapse;
  storedItems: typeof StoredItems;
  container: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDcafJsonEditor__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDcafJsonEditor__VariantsArgs;
    args?: PlasmicDcafJsonEditor__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDcafJsonEditor__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDcafJsonEditor__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDcafJsonEditor__ArgProps,
          internalVariantPropNames: PlasmicDcafJsonEditor__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDcafJsonEditor__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDcafJsonEditor";
  } else {
    func.displayName = `PlasmicDcafJsonEditor.${nodeName}`;
  }
  return func;
}

export const PlasmicDcafJsonEditor = Object.assign(
  // Top-level PlasmicDcafJsonEditor renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    collapse: makeNodeComponent("collapse"),
    storedItems: makeNodeComponent("storedItems"),
    container: makeNodeComponent("container"),

    // Metadata about props expected for PlasmicDcafJsonEditor
    internalVariantProps: PlasmicDcafJsonEditor__VariantProps,
    internalArgProps: PlasmicDcafJsonEditor__ArgProps
  }
);

export default PlasmicDcafJsonEditor;
/* prettier-ignore-end */
